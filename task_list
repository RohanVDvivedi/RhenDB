 PICKED TASKS

mvcc snapshot
 * function to test if a tuple with corresponding mvcc header could be vaccummed
  * make active_transaction_id_entry store minimum_active_transaction_id_in_snapshot
  * build function to get_vaccum_horizon_transaction_id
 * build mvcc header function to identify if a tuple can be vaccummed

 * lock table (using VolatilePageStore)
 * attributes
   * phy_id (physical id of the tuple on the disk, (page_id, tuple_id))
   * lock_mode (SHARED, EXCLUSIVE and many more)
   * lock_status (HELD or WAITING)
   * transaction_id (uint256 id of the transaction)
   * timestamp (creation of this entry, for wait timeouts)
 * define indexes for it

 * define catalog tables and indexes on it - persistent
 * define statistics tables - persistent and possibly in a different database
 * define beedb struct
   * with pointer access to volatile memory using VolatilePageStore, and to shared persistent memory using MinTxEngine
   * using their corresponding page access methods and page modification methods
   * add data structures to get access for most relevant tuple definitions

 * implement SQL parser (possibly in a different directory)
 * implement query plan tree
   * with operators
 * implement relational algebra operators
   * selection -> filter with/without indexes
   * projection -> picking columns
   * sorting -> with/without indexes
   * joins -> with/without indexes
   * union, set difference and intersection

 * define layout for MVCC columns and figure out how to store multiple versions
 * define MVCC rules for different isolation levels

 * Design methodology
   * we will use postgresql architecture over (mysql like) mini transactions
   * we will have heaps (a future tuple indexer data structure) for storing tables, insert to which gives us a page_id (physical page_id) and a index (slot no) in that page
   * indexes will always include the page_id, slot_no in the index key right after the actual key columns, and the index entry will be index key followed by the covering columns
   * inserts/deletes will always be done to heap in a single mini transaction one at a time
     * inserts/deletes to indexes will be done in mini transactions not owned by anyone
   * updates are just delete followed by insert into the heap
   * reads will be be done without mini transactions, but in a fixed number of them
   * there will be vaccum, which will be thought off at the end of this project
   * header will include xmin, xmax, is_xmin_committed?, is_xmax_committed?, is_xmin_aborted?, is_xmax_aborted?
     * xmin, xmax will be 64 or lesser (atleast 48) bits wide
     * the *? are advisory bitmaps and should be kept updated when ever a heap page is being read (if only a read lock on page is held then let another writer do it asynchronously) or written
   * we will never chain mini transactions for a high level transaction, we will just ensure that the transactions read only the data that is visible to then in the most optimum way possible, just like postgresql

 * we need a heap table data structure like postgresql (need to build this)
   * we will need 2 bplus_trees
     * free_space_tree, key = (free_space, page_id) -> in volatile memory protected by a rwlock
     * heap_pages_tree, key = (page_id) -> persistent on disk, inside a mintxending protected by deadlock avoider btree lock
   * every access is done over the table using the heap pages tree as if it is an index pointing to pages
   * free space tree is just an hint in volatile memory for the best page to accomodate a new tuple, its contents will not always be consistent with the heap pages tree
   * there is a function called get_page_with_enough_space to get a page and insert a tuple on it, this function will also be responsible to rebuild the free space tree when it find plenty of wrong entries
   * standard latch rules apply index->heap_page, heap_pages_tree->heap_page, heap_pages_tree is just like another index
   * while accessing the free_space_tree rules apply to access and always lock in the following order, free_sapce_tree->heap_pages_tree->heap_page