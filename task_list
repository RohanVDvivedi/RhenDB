 PICKED TASKS

 * heap_table
   * heap_table_root {uint64_t free_space_tree_root_page_id, uint64_t heap_pages_root_page_id}
   * we will need 2 bplus_trees
     * free_space_tree, key = (free_space, page_id) -> in volatile memory protected by a rwlock
     * heap_pages_tree, key = (page_id) -> possibly persistent on disk, inside a mintxengine protected by deadlock avoider btree lock
   * free_space_tree has to be volatile, and stores (free_space, page_id)
   * heap_pages_tree may be volatile or persistent ACID, and stores (page_id)
   * heap_pages_tree works just like any other index, except indexes point to (page_id, tuple_index) instead of page_id
   * free space tree is just an hint in volatile memory for the best page to accomodate a new tuple, its contents will not always be consistent with the heap pages tree
   * free_space_tree is only used to find a page with enough free space to the next incomming tuple, presence of this page must be verified using the heap_pages_tree
   * scan over the complete table only scans all the pages in the order of their page_id-s using the heap_pages_tree
   * there will be a function called get_page_with_enough_space to get a page and insert a tuple on it, this function will also be responsible to rebuild the free space tree when it finds plenty of wrong entries
   * standard latch rules apply index->heap_page, heap_pages_tree->heap_page, heap_pages_tree is just like another index
   * while accessing the free_space_tree rules apply to access and always lock in the following order, free_sapce_tree->heap_pages_tree->heap_page

 * lock table (using VolatilePageStore)
 * attributes
   * resource_type - uint16_t
   * resource_id - uint256 -> table_id or row_id (page_id, tuple_index)
   * lock_mode (SHARED, EXCLUSIVE and many more) uint16_t
   * lock_status (WAITING or HELD) 1 bit
   * transaction_id (uint256 id of the transaction)
   * timestamp (creation of this entry, for wait timeouts) -> new entry to be created for lock_mode change from WAITING -> HELD
 * indexes
   * transaction_id -> lock (to find all locks held and release them upon a commit or abort)
   * resource_type, resource_id, lock_mode, lock_status -> lock (to find all contentions to acquire new locks AND to detect deadlocks)

 * define catalog tables and indexes on it - persistent
 * define statistics tables - persistent and possibly in a different database
 * define beedb struct
   * with pointer access to volatile memory using VolatilePageStore, and to shared persistent memory using MinTxEngine
   * using their corresponding page access methods and page modification methods
   * add data structures to get access for most relevant tuple definitions

 * implement SQL parser (possibly in a different directory)
 * implement query plan tree
   * with operators
 * implement relational algebra operators
   * selection -> filter with/without indexes
   * projection -> picking columns
   * sorting -> with/without indexes
   * joins -> with/without indexes
   * union, set difference and intersection

 * Design methodology
   * we will use postgresql architecture over (mysql like) mini transactions
   * we will have heaps for storing tables, insert to which gives us a page_id (physical page_id) and a tuple_index (slot no) in that page
   * indexes will always include the page_id, tuple_index in the index key right after the actual key columns, and the index entry will be index key followed by the covering columns
   * standard latch rules apply index->heap_page, heap_pages_tree->heap_page
   * inserts/deletes will always be done to heap in a single mini transaction one at a time
     * inserts/deletes to indexes will be done in mini transactions not owned by anyone
   * updates are just delete followed by insert into the heap
   * reads will be be done without mini transactions, but in a fixed number of them
   * there will be vaccum, like postgresql
   * header will include xmin, xmax, is_xmin_committed?, is_xmax_committed?, is_xmin_aborted?, is_xmax_aborted?
     * xmin, xmax will be as wide as transaction_table suggests
     * the *? are advisory bitmaps and should be kept updated when ever a heap page is being read (if only a read lock on page is held then let another writer do it asynchronously) or written
   * we will never chain mini transactions for a high level transaction, we will just ensure that the transactions read only the data that is visible to them, and vaccum out invisible rows
   * lock_tables -> need to think over it